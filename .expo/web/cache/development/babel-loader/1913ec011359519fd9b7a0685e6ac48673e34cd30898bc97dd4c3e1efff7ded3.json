{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { OverlayContainer } from '@react-native-aria/overlays';\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport { useKeyboardDismissable } from \"../../../hooks\";\nimport { ExitAnimationContext } from \"./ExitAnimationContext\";\nexport function Overlay(_ref) {\n  var children = _ref.children,\n    isOpen = _ref.isOpen,\n    _ref$useRNModalOnAndr = _ref.useRNModalOnAndroid,\n    useRNModalOnAndroid = _ref$useRNModalOnAndr === void 0 ? false : _ref$useRNModalOnAndr,\n    _ref$isKeyboardDismis = _ref.isKeyboardDismissable,\n    isKeyboardDismissable = _ref$isKeyboardDismis === void 0 ? true : _ref$isKeyboardDismis,\n    _ref$animationPreset = _ref.animationPreset,\n    animationPreset = _ref$animationPreset === void 0 ? 'fade' : _ref$animationPreset,\n    onRequestClose = _ref.onRequestClose,\n    style = _ref.style,\n    unmountOnExit = _ref.unmountOnExit;\n  var _React$useState = React.useState(!isOpen),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    exited = _React$useState2[0],\n    setExited = _React$useState2[1];\n  useKeyboardDismissable({\n    enabled: isOpen && isKeyboardDismissable,\n    callback: onRequestClose ? onRequestClose : function () {}\n  });\n  var styleObj = _objectSpread({}, style);\n  if (animationPreset === 'slide') {\n    styleObj.overflow = 'hidden';\n    styleObj.display = 'flex';\n  } else {\n    styleObj.display = exited && !isOpen ? 'none' : 'flex';\n  }\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n  if (Platform.OS === 'android' && useRNModalOnAndroid) {\n    return React.createElement(ExitAnimationContext.Provider, {\n      value: {\n        exited: exited,\n        setExited: setExited\n      }\n    }, React.createElement(Modal, {\n      transparent: true,\n      visible: isOpen,\n      onRequestClose: onRequestClose,\n      animationType: animationPreset\n    }, children));\n  }\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n  return React.createElement(OverlayContainer, {\n    style: _objectSpread({}, styleObj)\n  }, React.createElement(ExitAnimationContext.Provider, {\n    value: {\n      exited: exited,\n      setExited: setExited\n    }\n  }, children));\n}","map":{"version":3,"names":["OverlayContainer","React","Platform","Modal","useKeyboardDismissable","ExitAnimationContext","Overlay","_ref","children","isOpen","_ref$useRNModalOnAndr","useRNModalOnAndroid","_ref$isKeyboardDismis","isKeyboardDismissable","_ref$animationPreset","animationPreset","onRequestClose","style","unmountOnExit","_React$useState","useState","_React$useState2","_slicedToArray","exited","setExited","enabled","callback","styleObj","_objectSpread","overflow","display","OS","createElement","Provider","value","transparent","visible","animationType"],"sources":["D:\\_Dev\\expo\\pk-mobile\\node_modules\\native-base\\lib\\module\\components\\primitives\\Overlay\\Overlay.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { OverlayContainer } from '@react-native-aria/overlays';\nimport React from 'react';\nimport { Platform, ViewStyle } from 'react-native';\nimport { Modal } from 'react-native';\nimport { useKeyboardDismissable } from '../../../hooks';\nimport { ExitAnimationContext } from './ExitAnimationContext';\n\nexport interface IOverlayProps {\n  isOpen?: boolean;\n  children?: any;\n  // We use RN modal on android if needed as it supports shifting accessiblity focus to the opened view. IOS automatically shifts focus if an absolutely placed view appears in front.\n  useRNModalOnAndroid?: boolean;\n  onRequestClose?: (() => any) | undefined;\n  isKeyboardDismissable?: boolean;\n  animationPreset?: 'fade' | 'slide' | 'none';\n  style?: ViewStyle;\n  unmountOnExit?: boolean;\n}\n\nexport function Overlay({\n  children,\n  isOpen,\n  useRNModalOnAndroid = false,\n  isKeyboardDismissable = true,\n  //@ts-ignore\n  animationPreset = 'fade',\n  onRequestClose,\n  style,\n  unmountOnExit,\n}: IOverlayProps) {\n  const [exited, setExited] = React.useState(!isOpen);\n\n  useKeyboardDismissable({\n    enabled: isOpen && isKeyboardDismissable,\n    callback: onRequestClose ? onRequestClose : () => {},\n  });\n  const styleObj = { ...style };\n  if (animationPreset === 'slide') {\n    styleObj.overflow = 'hidden';\n    styleObj.display = 'flex';\n  } else {\n    styleObj.display = exited && !isOpen ? 'none' : 'flex';\n  }\n\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n\n  if (Platform.OS === 'android' && useRNModalOnAndroid) {\n    return (\n      <ExitAnimationContext.Provider value={{ exited, setExited }}>\n        <Modal\n          transparent\n          visible={isOpen}\n          onRequestClose={onRequestClose}\n          animationType={animationPreset}\n        >\n          {children}\n        </Modal>\n      </ExitAnimationContext.Provider>\n    );\n  }\n\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n\n  return (\n    //@ts-ignore\n    <OverlayContainer style={{ ...styleObj }}>\n      <ExitAnimationContext.Provider value={{ exited, setExited }}>\n        {children}\n      </ExitAnimationContext.Provider>\n    </OverlayContainer>\n  );\n}\n"],"mappings":";;;;AACA,SAASA,gBAAT,QAAiC,6BAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAAA,OAAAC,QAAA;AAAA,OAAAC,KAAA;AAGA,SAASC,sBAAT;AACA,SAASC,oBAAT;AAcA,OAAO,SAASC,OAATA,CAAAC,IAAA,EAUW;EAAA,IAThBC,QADsB,GAAAD,IAAA,CACtBC,QADsB;IAEtBC,MAFsB,GAAAF,IAAA,CAEtBE,MAFsB;IAAAC,qBAAA,GAAAH,IAAA,CAGtBI,mBAAmB;IAAnBA,mBAAmB,GAAAD,qBAAA,cAAG,KAHA,GAAAA,qBAAA;IAAAE,qBAAA,GAAAL,IAAA,CAItBM,qBAAqB;IAArBA,qBAAqB,GAAAD,qBAAA,cAAG,IAJF,GAAAA,qBAAA;IAAAE,oBAAA,GAAAP,IAAA,CAMtBQ,eAAe;IAAfA,eAAe,GAAAD,oBAAA,cAAG,MANI,GAAAA,oBAAA;IAOtBE,cAPsB,GAAAT,IAAA,CAOtBS,cAPsB;IAQtBC,KARsB,GAAAV,IAAA,CAQtBU,KARsB;IAStBC,aAAA,GAAAX,IAAA,CAAAW,aAAA;EAEA,IAAAC,eAAA,GAA4BlB,KAAK,CAACmB,QAAN,CAAe,CAACX,MAAhB,CAA5B;IAAAY,gBAAA,GAAAC,cAAA,CAAAH,eAAA;IAAOI,MAAD,GAAAF,gBAAA;IAASG,SAAT,GAAAH,gBAAA;EAENjB,sBAAsB,CAAC;IACrBqB,OAAO,EAAEhB,MAAM,IAAII,qBADE;IAErBa,QAAQ,EAAEV,cAAc,GAAGA,cAAH,GAAoB,YAAM,CAAE;EAF/B,CAAD,CAAtB;EAIA,IAAMW,QAAQ,GAAAC,aAAA,KAAQX,KAAA,CAAtB;EACA,IAAIF,eAAe,KAAK,OAAxB,EAAiC;IAC/BY,QAAQ,CAACE,QAAT,GAAoB,QAApB;IACAF,QAAQ,CAACG,OAAT,GAAmB,MAAnB;EACD,CAHD,MAGO;IACLH,QAAQ,CAACG,OAAT,GAAmBP,MAAM,IAAI,CAACd,MAAX,GAAoB,MAApB,GAA6B,MAAhD;EACD;EAED,IAAIS,aAAa,IAAI,CAACT,MAAlB,IAA4Bc,MAAhC,EAAwC;IACtC,OAAO,IAAP;EACD;EAED,IAAIrB,QAAQ,CAAC6B,EAAT,KAAgB,SAAhB,IAA6BpB,mBAAjC,EAAsD;IACpD,OACEV,KAAA,CAAA+B,aAAA,CAAC3B,oBAAD,CAAsB4B,QAAtB;MAA+BC,KAAK,EAAE;QAAEX,MAAF,EAAEA,MAAF;QAAUC,SAAA,EAAAA;MAAV;IAAtC,GACEvB,KAAA,CAAA+B,aAAA,CAAC7B,KAAD;MACEgC,WAAW,MADb;MAEEC,OAAO,EAAE3B,MAFX;MAGEO,cAAc,EAAEA,cAHlB;MAIEqB,aAAa,EAAEtB;IAJjB,GAMGP,QANH,CADF,CADF;EAYD;EAED,IAAIU,aAAa,IAAI,CAACT,MAAlB,IAA4Bc,MAAhC,EAAwC;IACtC,OAAO,IAAP;EACD;EAED,OAEEtB,KAAA,CAAA+B,aAAA,CAAChC,gBAAD;IAAkBiB,KAAK,EAAAW,aAAA,KAAOD,QAAA;EAA9B,GACE1B,KAAA,CAAA+B,aAAA,CAAC3B,oBAAD,CAAsB4B,QAAtB;IAA+BC,KAAK,EAAE;MAAEX,MAAF,EAAEA,MAAF;MAAUC,SAAA,EAAAA;IAAV;EAAtC,GACGhB,QADH,CADF;AAMH"},"metadata":{},"sourceType":"module","externalDependencies":[]}