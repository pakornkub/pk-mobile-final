{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { filterDOMProps as $frWMC$filterDOMProps, useId as $frWMC$useId, mergeProps as $frWMC$mergeProps, useSlotId as $frWMC$useSlotId, isMac as $frWMC$isMac, isWebKit as $frWMC$isWebKit } from \"@react-aria/utils\";\nimport { useFocusWithin as $frWMC$useFocusWithin, useHover as $frWMC$useHover, isFocusVisible as $frWMC$isFocusVisible } from \"@react-aria/interactions\";\nimport { useLabel as $frWMC$useLabel } from \"@react-aria/label\";\nimport { useSelectableList as $frWMC$useSelectableList, useSelectableItem as $frWMC$useSelectableItem } from \"@react-aria/selection\";\nimport { getItemCount as $frWMC$getItemCount } from \"@react-stately/collections\";\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\nvar $c132121280ec012d$exports = {};\n$parcel$export($c132121280ec012d$exports, \"useListBox\", function () {\n  return $c132121280ec012d$export$50eacbbf140a3141;\n});\nvar $b1f0cad8af73213b$exports = {};\n$parcel$export($b1f0cad8af73213b$exports, \"listData\", function () {\n  return $b1f0cad8af73213b$export$3585ede4d035bf14;\n});\n$parcel$export($b1f0cad8af73213b$exports, \"getItemId\", function () {\n  return $b1f0cad8af73213b$export$9145995848b05025;\n});\nvar $b1f0cad8af73213b$export$3585ede4d035bf14 = new WeakMap();\nfunction $b1f0cad8af73213b$var$normalizeKey(key) {\n  if (typeof key === 'string') return key.replace(/\\s*/g, '');\n  return '' + key;\n}\nfunction $b1f0cad8af73213b$export$9145995848b05025(state, itemKey) {\n  var data = $b1f0cad8af73213b$export$3585ede4d035bf14.get(state);\n  if (!data) throw new Error('Unknown list');\n  return data.id + \"-option-\" + $b1f0cad8af73213b$var$normalizeKey(itemKey);\n}\nfunction $c132121280ec012d$export$50eacbbf140a3141(props, state, ref) {\n  var domProps = $frWMC$filterDOMProps(props, {\n    labelable: true\n  });\n  var _$frWMC$useSelectable = $frWMC$useSelectableList(_objectSpread(_objectSpread({}, props), {}, {\n      ref: ref,\n      selectionManager: state.selectionManager,\n      collection: state.collection,\n      disabledKeys: state.disabledKeys\n    })),\n    listProps = _$frWMC$useSelectable.listProps;\n  var _$frWMC$useFocusWithi = $frWMC$useFocusWithin({\n      onFocusWithin: props.onFocus,\n      onBlurWithin: props.onBlur,\n      onFocusWithinChange: props.onFocusChange\n    }),\n    focusWithinProps = _$frWMC$useFocusWithi.focusWithinProps;\n  var id = $frWMC$useId(props.id);\n  $b1f0cad8af73213b$export$3585ede4d035bf14.set(state, {\n    id: id,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus,\n    shouldSelectOnPressUp: props.shouldSelectOnPressUp,\n    shouldFocusOnHover: props.shouldFocusOnHover,\n    isVirtualized: props.isVirtualized\n  });\n  var _$frWMC$useLabel = $frWMC$useLabel(_objectSpread(_objectSpread({}, props), {}, {\n      id: id,\n      labelElementType: 'span'\n    })),\n    labelProps = _$frWMC$useLabel.labelProps,\n    fieldProps = _$frWMC$useLabel.fieldProps;\n  return {\n    labelProps: labelProps,\n    listBoxProps: $frWMC$mergeProps(domProps, focusWithinProps, state.selectionManager.selectionMode === 'multiple' ? {\n      'aria-multiselectable': 'true'\n    } : {}, _objectSpread({\n      role: 'listbox'\n    }, $frWMC$mergeProps(fieldProps, listProps)))\n  };\n}\nvar $293f70390ea03370$exports = {};\n$parcel$export($293f70390ea03370$exports, \"useOption\", function () {\n  return $293f70390ea03370$export$497855f14858aa34;\n});\nfunction $293f70390ea03370$export$497855f14858aa34(props, state, ref) {\n  var key = props.key;\n  var data = $b1f0cad8af73213b$export$3585ede4d035bf14.get(state);\n  var _isDisabled;\n  var isDisabled = (_isDisabled = props.isDisabled) !== null && _isDisabled !== void 0 ? _isDisabled : state.disabledKeys.has(key);\n  var _isSelected;\n  var isSelected = (_isSelected = props.isSelected) !== null && _isSelected !== void 0 ? _isSelected : state.selectionManager.isSelected(key);\n  var isFocused = state.selectionManager.focusedKey === key;\n  var _shouldSelectOnPressUp;\n  var shouldSelectOnPressUp = (_shouldSelectOnPressUp = props.shouldSelectOnPressUp) !== null && _shouldSelectOnPressUp !== void 0 ? _shouldSelectOnPressUp : data.shouldSelectOnPressUp;\n  var _shouldFocusOnHover;\n  var shouldFocusOnHover = (_shouldFocusOnHover = props.shouldFocusOnHover) !== null && _shouldFocusOnHover !== void 0 ? _shouldFocusOnHover : data.shouldFocusOnHover;\n  var _shouldUseVirtualFocus;\n  var shouldUseVirtualFocus = (_shouldUseVirtualFocus = props.shouldUseVirtualFocus) !== null && _shouldUseVirtualFocus !== void 0 ? _shouldUseVirtualFocus : data.shouldUseVirtualFocus;\n  var _isVirtualized;\n  var isVirtualized = (_isVirtualized = props.isVirtualized) !== null && _isVirtualized !== void 0 ? _isVirtualized : data.isVirtualized;\n  var labelId = $frWMC$useSlotId();\n  var descriptionId = $frWMC$useSlotId();\n  var optionProps = {\n    role: 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined\n  };\n  if (!($frWMC$isMac() && $frWMC$isWebKit())) {\n    optionProps['aria-label'] = props['aria-label'];\n    optionProps['aria-labelledby'] = labelId;\n    optionProps['aria-describedby'] = descriptionId;\n  }\n  if (isVirtualized) {\n    optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    optionProps['aria-setsize'] = $frWMC$getItemCount(state.collection);\n  }\n  var _$frWMC$useSelectable2 = $frWMC$useSelectableItem({\n      selectionManager: state.selectionManager,\n      key: key,\n      ref: ref,\n      shouldSelectOnPressUp: shouldSelectOnPressUp,\n      allowsDifferentPressOrigin: shouldSelectOnPressUp,\n      isVirtualized: isVirtualized,\n      shouldUseVirtualFocus: shouldUseVirtualFocus,\n      isDisabled: isDisabled\n    }),\n    itemProps = _$frWMC$useSelectable2.itemProps,\n    isPressed = _$frWMC$useSelectable2.isPressed;\n  var _$frWMC$useHover = $frWMC$useHover({\n      isDisabled: isDisabled || !shouldFocusOnHover,\n      onHoverStart: function onHoverStart() {\n        if (!$frWMC$isFocusVisible()) {\n          state.selectionManager.setFocused(true);\n          state.selectionManager.setFocusedKey(key);\n        }\n      }\n    }),\n    hoverProps = _$frWMC$useHover.hoverProps;\n  return {\n    optionProps: _objectSpread(_objectSpread(_objectSpread({}, optionProps), $frWMC$mergeProps(itemProps, hoverProps)), {}, {\n      id: $b1f0cad8af73213b$export$9145995848b05025(state, key)\n    }),\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    isFocused: isFocused,\n    isSelected: isSelected,\n    isDisabled: isDisabled,\n    isPressed: isPressed\n  };\n}\nvar $af383d3bef1cfdc9$exports = {};\n$parcel$export($af383d3bef1cfdc9$exports, \"useListBoxSection\", function () {\n  return $af383d3bef1cfdc9$export$c3f9f39876e4bc7;\n});\nfunction $af383d3bef1cfdc9$export$c3f9f39876e4bc7(props) {\n  var heading = props.heading,\n    ariaLabel = props['aria-label'];\n  var headingId = $frWMC$useId();\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      id: headingId,\n      'aria-hidden': true\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}\nexport { $c132121280ec012d$export$50eacbbf140a3141 as useListBox, $293f70390ea03370$export$497855f14858aa34 as useOption, $af383d3bef1cfdc9$export$c3f9f39876e4bc7 as useListBoxSection, $b1f0cad8af73213b$export$3585ede4d035bf14 as listData, $b1f0cad8af73213b$export$9145995848b05025 as getItemId };","map":{"version":3,"names":["$b1f0cad8af73213b$export$3585ede4d035bf14","WeakMap","$b1f0cad8af73213b$var$normalizeKey","key","replace","$b1f0cad8af73213b$export$9145995848b05025","state","itemKey","data","get","Error","id","$c132121280ec012d$export$50eacbbf140a3141","props","ref","domProps","$frWMC$filterDOMProps","labelable","_$frWMC$useSelectable","$frWMC$useSelectableList","_objectSpread","selectionManager","collection","disabledKeys","listProps","_$frWMC$useFocusWithi","$frWMC$useFocusWithin","onFocusWithin","onFocus","onBlurWithin","onBlur","onFocusWithinChange","onFocusChange","focusWithinProps","$frWMC$useId","set","shouldUseVirtualFocus","shouldSelectOnPressUp","shouldFocusOnHover","isVirtualized","_$frWMC$useLabel","$frWMC$useLabel","labelElementType","labelProps","fieldProps","listBoxProps","$frWMC$mergeProps","selectionMode","role","$293f70390ea03370$export$497855f14858aa34","_isDisabled","isDisabled","has","_isSelected","isSelected","isFocused","focusedKey","_shouldSelectOnPressUp","_shouldFocusOnHover","_shouldUseVirtualFocus","_isVirtualized","labelId","$frWMC$useSlotId","descriptionId","optionProps","undefined","$frWMC$isMac","$frWMC$isWebKit","getItem","index","$frWMC$getItemCount","_$frWMC$useSelectable2","$frWMC$useSelectableItem","allowsDifferentPressOrigin","itemProps","isPressed","_$frWMC$useHover","$frWMC$useHover","onHoverStart","$frWMC$isFocusVisible","setFocused","setFocusedKey","hoverProps","descriptionProps","$af383d3bef1cfdc9$export$c3f9f39876e4bc7","heading","ariaLabel","headingId","headingProps","groupProps"],"sources":["D:\\_Dev\\expo\\pk-mobile\\node_modules\\@react-aria\\listbox\\dist\\packages\\@react-aria\\listbox\\src\\index.ts","D:\\_Dev\\expo\\pk-mobile\\node_modules\\@react-aria\\listbox\\dist\\packages\\@react-aria\\listbox\\src\\useListBox.ts","D:\\_Dev\\expo\\pk-mobile\\node_modules\\@react-aria\\listbox\\dist\\packages\\@react-aria\\listbox\\src\\utils.ts","D:\\_Dev\\expo\\pk-mobile\\node_modules\\@react-aria\\listbox\\dist\\packages\\@react-aria\\listbox\\src\\useOption.ts","D:\\_Dev\\expo\\pk-mobile\\node_modules\\@react-aria\\listbox\\dist\\packages\\@react-aria\\listbox\\src\\useListBoxSection.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport * from './useListBox';\nexport * from './useOption';\nexport * from './useListBoxSection';\nexport * from './utils';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaListBoxProps} from '@react-types/listbox';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {HTMLAttributes, ReactNode, RefObject} from 'react';\nimport {KeyboardDelegate} from '@react-types/shared';\nimport {listData} from './utils';\nimport {ListState} from '@react-stately/list';\nimport {useFocusWithin} from '@react-aria/interactions';\nimport {useId} from '@react-aria/utils';\nimport {useLabel} from '@react-aria/label';\nimport {useSelectableList} from '@react-aria/selection';\n\ninterface ListBoxAria {\n  /** Props for the listbox element. */\n  listBoxProps: HTMLAttributes<HTMLElement>,\n  /** Props for the listbox's visual label element (if any). */\n  labelProps: HTMLAttributes<HTMLElement>\n}\n\nexport interface AriaListBoxOptions<T> extends Omit<AriaListBoxProps<T>, 'children'> {\n  /** Whether the listbox uses virtual scrolling. */\n  isVirtualized?: boolean,\n\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n\n  /**\n   * Whether the listbox items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n\n  /** Whether selection should occur on press up instead of press down. */\n  shouldSelectOnPressUp?: boolean,\n\n  /** Whether options should be focused when the user hovers over them. */\n  shouldFocusOnHover?: boolean,\n\n  /**\n   * An optional visual label for the listbox.\n   */\n  label?: ReactNode\n}\n\n/**\n * Provides the behavior and accessibility implementation for a listbox component.\n * A listbox displays a list of options and allows a user to select one or more of them.\n * @param props - Props for the listbox.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useListBox<T>(props: AriaListBoxOptions<T>, state: ListState<T>, ref: RefObject<HTMLElement>): ListBoxAria {\n  let domProps = filterDOMProps(props, {labelable: true});\n  let {listProps} = useSelectableList({\n    ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys\n  });\n\n  let {focusWithinProps} = useFocusWithin({\n    onFocusWithin: props.onFocus,\n    onBlurWithin: props.onBlur,\n    onFocusWithinChange: props.onFocusChange\n  });\n\n  // Share list id and some props with child options.\n  let id = useId(props.id);\n  listData.set(state, {\n    id,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus,\n    shouldSelectOnPressUp: props.shouldSelectOnPressUp,\n    shouldFocusOnHover: props.shouldFocusOnHover,\n    isVirtualized: props.isVirtualized\n  });\n\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    id,\n    // listbox is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  return {\n    labelProps,\n    listBoxProps: mergeProps(domProps, focusWithinProps, state.selectionManager.selectionMode === 'multiple' ? {\n      'aria-multiselectable': 'true'\n    } : {}, {\n      role: 'listbox',\n      ...mergeProps(fieldProps, listProps)\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {ListState} from '@react-stately/list';\n\ninterface ListData {\n  id: string,\n  shouldSelectOnPressUp?: boolean,\n  shouldFocusOnHover?: boolean,\n  shouldUseVirtualFocus?: boolean,\n  isVirtualized?: boolean\n}\n\nexport const listData = new WeakMap<ListState<unknown>, ListData>();\n\nfunction normalizeKey(key: Key): string {\n  if (typeof key === 'string') {\n    return key.replace(/\\s*/g, '');\n  }\n\n  return '' + key;\n}\n\nexport function getItemId<T>(state: ListState<T>, itemKey: Key): string {\n  let data = listData.get(state);\n\n  if (!data) {\n    throw new Error('Unknown list');\n  }\n\n  return `${data.id}-option-${normalizeKey(itemKey)}`;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {getItemCount} from '@react-stately/collections';\nimport {getItemId, listData} from './utils';\nimport {HTMLAttributes, Key, RefObject} from 'react';\nimport {isFocusVisible, useHover} from '@react-aria/interactions';\nimport {isMac, isWebKit, mergeProps, useSlotId} from '@react-aria/utils';\nimport {ListState} from '@react-stately/list';\nimport {useSelectableItem} from '@react-aria/selection';\n\ninterface OptionAria {\n  /** Props for the option element. */\n  optionProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the main text element inside the option. */\n  labelProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the description text element inside the option, if any. */\n  descriptionProps: HTMLAttributes<HTMLElement>,\n\n  /** Whether the option is currently focused. */\n  isFocused: boolean,\n  /** Whether the option is currently selected. */\n  isSelected: boolean,\n  /** Whether the option is currently in a pressed state. */\n  isPressed: boolean,\n  /** Whether the option is disabled. */\n  isDisabled: boolean\n}\n\ninterface AriaOptionProps {\n  /**\n   * Whether the option is disabled.\n   * @deprecated\n   */\n  isDisabled?: boolean,\n\n  /**\n   * Whether the option is selected.\n   * @deprecated\n   */\n  isSelected?: boolean,\n\n  /** A screen reader only label for the option. */\n  'aria-label'?: string,\n\n  /** The unique key for the option. */\n  key: Key,\n\n  /**\n   * Whether selection should occur on press up instead of press down.\n   * @deprecated\n   */\n  shouldSelectOnPressUp?: boolean,\n\n  /**\n   * Whether the option should be focused when the user hovers over it.\n   * @deprecated\n   */\n  shouldFocusOnHover?: boolean,\n\n  /**\n   * Whether the option is contained in a virtual scrolling listbox.\n   * @deprecated\n   */\n  isVirtualized?: boolean,\n\n  /**\n   * Whether the option should use virtual focus instead of being focused directly.\n   * @deprecated\n   */\n  shouldUseVirtualFocus?: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for an option in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the option.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useOption<T>(props: AriaOptionProps, state: ListState<T>, ref: RefObject<HTMLElement>): OptionAria {\n  let {\n    key\n  } = props;\n\n  let data = listData.get(state);\n\n  let isDisabled = props.isDisabled ?? state.disabledKeys.has(key);\n  let isSelected = props.isSelected ?? state.selectionManager.isSelected(key);\n  let isFocused = state.selectionManager.focusedKey === key;\n  let shouldSelectOnPressUp = props.shouldSelectOnPressUp ?? data.shouldSelectOnPressUp;\n  let shouldFocusOnHover = props.shouldFocusOnHover ?? data.shouldFocusOnHover;\n  let shouldUseVirtualFocus = props.shouldUseVirtualFocus ?? data.shouldUseVirtualFocus;\n  let isVirtualized = props.isVirtualized ?? data.isVirtualized;\n\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n\n  let optionProps = {\n    role: 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined\n  };\n\n  // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply \"text\".\n  // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.\n  // https://bugs.webkit.org/show_bug.cgi?id=209279\n  if (!(isMac() && isWebKit())) {\n    optionProps['aria-label'] = props['aria-label'];\n    optionProps['aria-labelledby'] = labelId;\n    optionProps['aria-describedby'] = descriptionId;\n  }\n\n  if (isVirtualized) {\n    optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    optionProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  let {itemProps, isPressed} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    allowsDifferentPressOrigin: shouldSelectOnPressUp,\n    isVirtualized,\n    shouldUseVirtualFocus,\n    isDisabled\n  });\n\n  let {hoverProps} = useHover({\n    isDisabled: isDisabled || !shouldFocusOnHover,\n    onHoverStart() {\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n  });\n\n  return {\n    optionProps: {\n      ...optionProps,\n      ...mergeProps(itemProps, hoverProps),\n      id: getItemId(state, key)\n    },\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    isFocused,\n    isSelected,\n    isDisabled,\n    isPressed\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {HTMLAttributes, ReactNode} from 'react';\nimport {useId} from '@react-aria/utils';\n\ninterface AriaListBoxSectionProps {\n  /** The heading for the section. */\n  heading?: ReactNode,\n  /** An accessibility label for the section. Required if `heading` is not present. */\n  'aria-label'?: string\n}\n\ninterface ListBoxSectionAria {\n  /** Props for the wrapper list item. */\n  itemProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the heading element, if any. */\n  headingProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the group element. */\n  groupProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a section in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the section.\n */\nexport function useListBoxSection(props: AriaListBoxSectionProps): ListBoxSectionAria {\n  let {heading, 'aria-label': ariaLabel} = props;\n  let headingId = useId();\n\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      // Techincally, listbox cannot contain headings according to ARIA.\n      // We hide the heading from assistive technology, and only use it\n      // as a label for the nested group.\n      id: headingId,\n      'aria-hidden': true\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}