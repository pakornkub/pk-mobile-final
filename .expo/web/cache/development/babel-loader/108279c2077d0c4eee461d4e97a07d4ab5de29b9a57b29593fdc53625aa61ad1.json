{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport React, { useEffect, useCallback } from \"react\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Avatar, HStack, Pressable, Text } from \"native-base\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { useNetInfo } from \"@react-native-community/netinfo\";\nimport { setAuth, selectAuth } from \"../../contexts/slices/authSlice\";\nimport AppScanner from \"../../components/AppScanner\";\nimport { getCurrentTimeStamp } from \"../../utils/date\";\nimport { getTimeFromToken } from \"../../utils/token\";\nimport { expireTime } from \"../../configs/token\";\nimport { DynamicMenu } from \"../../components/DynamicMenu\";\nimport Logo from \"../../components/Logo\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar Login = React.lazy(function () {\n  return import(\"../Login\");\n});\nvar Menu = React.lazy(function () {\n  return import(\"../Menu\");\n});\nvar Error404 = React.lazy(function () {\n  return import(\"../Error404\");\n});\nvar Main = function Main() {\n  var _authResult$data, _authResult$data$perm;\n  var Stack = createStackNavigator();\n  var dispatch = useDispatch();\n  var _useSelector = useSelector(selectAuth),\n    authResult = _useSelector.authResult;\n  var NetInfo = useNetInfo();\n  var validateToken = useCallback(_asyncToGenerator(function* () {\n    try {\n      var auth = JSON.parse((yield AsyncStorage.getItem(\"auth\")) || \"{}\");\n      if (auth.status) {\n        var accessTime = getTimeFromToken(auth.data.token);\n        var currentTime = getCurrentTimeStamp();\n        if (currentTime - accessTime > expireTime) {\n          Alert.alert(\"Alert\", \"Your token is expired, please login again\", [{\n            text: \"OK\",\n            onPress: function onPress() {\n              dispatch(setAuth({}));\n            }\n          }]);\n        }\n        dispatch(setAuth(auth));\n      } else {\n        dispatch(setAuth({}));\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }), [authResult]);\n  var handleLogout = useCallback(function () {\n    Alert.alert(\"CONFIRM LOGOUT\", authResult == null ? void 0 : authResult.data.UserName, [{\n      text: \"CANCEL\",\n      style: \"cancel\"\n    }, {\n      text: \"CONFIRM\",\n      style: \"default\",\n      onPress: function onPress() {\n        dispatch(setAuth({}));\n      }\n    }]);\n  }, [authResult]);\n  useEffect(function () {\n    validateToken();\n  }, []);\n  return _jsx(_Fragment, {\n    children: _jsx(Stack.Navigator, {\n      children: authResult != null && authResult.status ? _jsxs(_Fragment, {\n        children: [_jsx(Stack.Screen, {\n          name: \"Menu\",\n          component: Menu,\n          options: function options() {\n            return {\n              headerTitle: function headerTitle() {\n                return _jsx(Logo, {});\n              },\n              headerRight: function headerRight() {\n                return _jsx(HStack, {\n                  space: 2,\n                  pr: \"2\",\n                  children: _jsx(Pressable, {\n                    onPress: function onPress() {\n                      return handleLogout();\n                    },\n                    children: function children(_ref2) {\n                      var isHovered = _ref2.isHovered,\n                        isPressed = _ref2.isPressed;\n                      return _jsxs(Avatar, {\n                        bg: \"blue.700\",\n                        size: \"sm\",\n                        mt: 1,\n                        w: Platform.OS === \"ios\" ? 10 : 100,\n                        color: isPressed ? \"blue.900\" : isHovered ? \"blue.900\" : \"blue.700\",\n                        style: {\n                          transform: [{\n                            scale: isPressed ? 0.96 : 1\n                          }]\n                        },\n                        children: [Platform.OS === \"ios\" ? authResult.data.UserName.charAt(0).toUpperCase() : _jsx(Text, {\n                          mb: 1,\n                          bold: true,\n                          isTruncated: true,\n                          color: \"warmGray.50\",\n                          children: authResult.data.UserName\n                        }), _jsx(Avatar.Badge, {\n                          bg: NetInfo.isConnected ? \"green.500\" : \"red.500\"\n                        })]\n                      });\n                    }\n                  })\n                });\n              }\n            };\n          }\n        }), authResult == null ? void 0 : (_authResult$data = authResult.data) == null ? void 0 : (_authResult$data$perm = _authResult$data.permission) == null ? void 0 : _authResult$data$perm.map(function (value, index) {\n          return _jsx(Stack.Screen, {\n            name: value.MenuId,\n            options: function options() {\n              return {\n                title: \"\" + value.MenuName.toUpperCase(),\n                headerStyle: {\n                  backgroundColor: \"#1C4ED8\"\n                },\n                headerTitleStyle: {\n                  color: \"#FFFEFE\",\n                  fontWeight: \"bold\"\n                },\n                headerTintColor: \"#FFFEFE\"\n              };\n            },\n            component: DynamicMenu[value.MenuId] ? DynamicMenu[value.MenuId] : Error404\n          }, index);\n        }), _jsx(Stack.Screen, {\n          name: \"AppScanner\",\n          component: AppScanner\n        })]\n      }) : _jsx(Stack.Screen, {\n        name: \"Login\",\n        component: Login,\n        options: function options() {\n          return {\n            headerShown: false\n          };\n        }\n      })\n    })\n  });\n};\nexport default Main;","map":{"version":3,"names":["React","useEffect","useCallback","Platform","useDispatch","useSelector","Avatar","HStack","Pressable","Text","Alert","createStackNavigator","AsyncStorage","useNetInfo","setAuth","selectAuth","AppScanner","getCurrentTimeStamp","getTimeFromToken","expireTime","DynamicMenu","Logo","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Login","lazy","Menu","Error404","Main","_authResult$data","_authResult$data$perm","Stack","dispatch","_useSelector","authResult","NetInfo","validateToken","_asyncToGenerator","auth","JSON","parse","getItem","status","accessTime","data","token","currentTime","alert","text","onPress","error","console","log","handleLogout","UserName","style","children","Navigator","Screen","name","component","options","headerTitle","headerRight","space","pr","_ref2","isHovered","isPressed","bg","size","mt","w","OS","color","transform","scale","charAt","toUpperCase","mb","bold","isTruncated","Badge","isConnected","permission","map","value","index","MenuId","title","MenuName","headerStyle","backgroundColor","headerTitleStyle","fontWeight","headerTintColor","headerShown"],"sources":["D:/_Dev/expo/pk-mobile/src/views/Main/Main.tsx"],"sourcesContent":["import React, { useEffect, useCallback } from \"react\";\r\nimport { Platform } from \"react-native\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Avatar, HStack, Pressable, Text } from \"native-base\";\r\nimport { Alert } from \"react-native\";\r\nimport { createStackNavigator } from \"@react-navigation/stack\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport { useNetInfo } from \"@react-native-community/netinfo\";\r\n\r\nimport { setAuth, selectAuth } from \"../../contexts/slices/authSlice\";\r\n\r\nimport AppScanner from \"../../components/AppScanner\";\r\nimport { getCurrentTimeStamp } from \"../../utils/date\";\r\nimport { getTimeFromToken } from \"../../utils/token\";\r\nimport { expireTime } from \"../../configs/token\";\r\n\r\nimport { DynamicMenu } from \"../../components/DynamicMenu\";\r\nimport Logo from \"../../components/Logo\";\r\n\r\nconst Login = React.lazy(() => import(\"../Login\"));\r\nconst Menu = React.lazy(() => import(\"../Menu\"));\r\nconst Error404 = React.lazy(() => import(\"../Error404\"));\r\n\r\nconst Main: React.FC = () => {\r\n  const Stack: any = createStackNavigator();\r\n  const dispatch = useDispatch();\r\n  const { authResult } = useSelector(selectAuth);\r\n\r\n  const NetInfo = useNetInfo();\r\n\r\n  const validateToken = useCallback(async () => {\r\n    try {\r\n      //? get token, status from AsyncStorage\r\n      const auth: any = JSON.parse(\r\n        (await AsyncStorage.getItem(\"auth\")) || \"{}\"\r\n      );\r\n\r\n      if (auth.status) {\r\n        const accessTime = getTimeFromToken(auth.data.token);\r\n        const currentTime = getCurrentTimeStamp();\r\n\r\n        //? if token is expired\r\n        if (currentTime - accessTime > expireTime) {\r\n          Alert.alert(\"Alert\", \"Your token is expired, please login again\", [\r\n            {\r\n              text: \"OK\",\r\n              onPress: () => {\r\n                dispatch(setAuth({}));\r\n              },\r\n            },\r\n          ]);\r\n        }\r\n\r\n        //? if token is valid\r\n        dispatch(setAuth(auth));\r\n      } else {\r\n        dispatch(setAuth({}));\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }, [authResult]);\r\n\r\n  const handleLogout = useCallback(() => {\r\n    Alert.alert(\"CONFIRM LOGOUT\", authResult?.data.UserName, [\r\n      {\r\n        text: \"CANCEL\",\r\n        style: \"cancel\",\r\n      },\r\n      {\r\n        text: \"CONFIRM\",\r\n        style: \"default\",\r\n        onPress: () => {\r\n          dispatch(setAuth({}));\r\n        },\r\n      },\r\n    ]);\r\n  }, [authResult]);\r\n\r\n  useEffect(() => {\r\n    validateToken();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Stack.Navigator>\r\n        {authResult?.status ? (\r\n          <>\r\n            <Stack.Screen\r\n              name=\"Menu\"\r\n              component={Menu}\r\n              options={() => ({\r\n                headerTitle: () => <Logo />,\r\n                headerRight: () => (\r\n                  <HStack space={2} pr=\"2\">\r\n                    <Pressable onPress={() => handleLogout()}>\r\n                      {({ isHovered, isPressed }) => {\r\n                        return (\r\n                          <Avatar\r\n                            bg=\"blue.700\"\r\n                            size=\"sm\"\r\n                            mt={1}\r\n                            w={Platform.OS === \"ios\" ? 10 : 100}\r\n                            color={\r\n                              isPressed\r\n                                ? \"blue.900\"\r\n                                : isHovered\r\n                                ? \"blue.900\"\r\n                                : \"blue.700\"\r\n                            }\r\n                            style={{\r\n                              transform: [\r\n                                {\r\n                                  scale: isPressed ? 0.96 : 1,\r\n                                },\r\n                              ],\r\n                            }}\r\n                          >\r\n                            {Platform.OS === \"ios\" ? (\r\n                              authResult.data.UserName.charAt(0).toUpperCase()\r\n                            ) : (\r\n                              <Text mb={1} bold isTruncated color=\"warmGray.50\">\r\n                                {authResult.data.UserName}\r\n                              </Text>\r\n                            )}\r\n                            <Avatar.Badge\r\n                              bg={NetInfo.isConnected ? \"green.500\" : \"red.500\"}\r\n                            />\r\n                          </Avatar>\r\n                        );\r\n                      }}\r\n                    </Pressable>\r\n                  </HStack>\r\n                ),\r\n              })}\r\n            />\r\n\r\n            {authResult?.data?.permission?.map((value: any, index: number) => {\r\n              return (\r\n                <Stack.Screen\r\n                  key={index}\r\n                  name={value.MenuId}\r\n                  options={() => ({\r\n                    title: `${value.MenuName.toUpperCase()}`,\r\n                    headerStyle: {\r\n                      backgroundColor: /* \"#2471A3\" */ \"#1C4ED8\",\r\n                    },\r\n                    headerTitleStyle: {\r\n                      color: \"#FFFEFE\",\r\n                      fontWeight : \"bold\"\r\n                    },\r\n                    headerTintColor: \"#FFFEFE\",\r\n                  })}\r\n                  component={\r\n                    DynamicMenu[value.MenuId]\r\n                      ? DynamicMenu[value.MenuId]\r\n                      : Error404\r\n                  }\r\n                />\r\n              );\r\n            })}\r\n\r\n            <Stack.Screen name=\"AppScanner\" component={AppScanner} />\r\n          </>\r\n        ) : (\r\n          <Stack.Screen\r\n            name=\"Login\"\r\n            component={Login}\r\n            options={() => ({\r\n              headerShown: false,\r\n            })}\r\n          />\r\n        )}\r\n      </Stack.Navigator>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}