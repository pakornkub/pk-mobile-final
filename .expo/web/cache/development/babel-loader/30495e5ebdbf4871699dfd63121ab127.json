{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { setAuth, selectAuth } from \"../../contexts/slices/authSlice\";\nimport { getCurrentTimeStamp } from \"../../utils/date\";\nimport { expireTime } from \"../../configs/token\";\nimport { getTimeFromToken } from \"../../utils/token\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Login = React.lazy(function () {\n  return import(\"../Login\");\n});\nvar Menu = React.lazy(function () {\n  return import(\"../Menu\");\n});\nvar CheckStock = React.lazy(function () {\n  return import(\"../CheckStock\");\n});\n\nvar Main = function Main() {\n  var Stack = createStackNavigator();\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(selectAuth),\n      authResult = _useSelector.authResult;\n\n  var validateToken = function _callee() {\n    var auth, accessTime, currentTime;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.t0 = JSON;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"auth\"));\n\n          case 4:\n            _context.t1 = _context.sent;\n\n            if (_context.t1) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.t1 = \"{}\";\n\n          case 7:\n            _context.t2 = _context.t1;\n            auth = _context.t0.parse.call(_context.t0, _context.t2);\n\n            if (auth.status) {\n              accessTime = getTimeFromToken(auth.data.token);\n              currentTime = getCurrentTimeStamp();\n\n              if (currentTime - accessTime > expireTime) {\n                Alert.alert(\"Alert\", \"Your token is expired, please login again\", [{\n                  text: \"OK\",\n                  onPress: function onPress() {\n                    dispatch(setAuth({}));\n                  }\n                }]);\n              }\n\n              dispatch(setAuth(auth));\n            } else {\n              dispatch(setAuth({}));\n            }\n\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t3 = _context[\"catch\"](0);\n            console.log(_context.t3);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 12]], Promise);\n  };\n\n  useEffect(function () {\n    validateToken();\n  }, []);\n  return _jsx(_Fragment, {\n    children: _jsx(Stack.Navigator, {\n      children: authResult != null && authResult.status ? _jsxs(_Fragment, {\n        children: [_jsx(Stack.Screen, {\n          name: \"Menu\",\n          component: Menu\n        }), _jsx(Stack.Screen, {\n          name: \"CheckStock\",\n          component: CheckStock\n        })]\n      }) : _jsx(Stack.Screen, {\n        name: \"Login\",\n        component: Login\n      })\n    })\n  });\n};\n\nexport default Main;","map":{"version":3,"names":["React","useEffect","useDispatch","useSelector","createStackNavigator","AsyncStorage","setAuth","selectAuth","getCurrentTimeStamp","expireTime","getTimeFromToken","Login","lazy","Menu","CheckStock","Main","Stack","dispatch","authResult","validateToken","JSON","getItem","auth","parse","status","accessTime","data","token","currentTime","Alert","alert","text","onPress","console","log"],"sources":["D:/Dev/pk-mobile/src/views/Main/Main.tsx"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Alert } from \"react-native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nimport { setAuth, selectAuth } from \"../../contexts/slices/authSlice\";\n\nimport { getCurrentTimeStamp } from \"../../utils/date\";\nimport { expireTime } from \"../../configs/token\";\nimport { getTimeFromToken } from \"../../utils/token\";\n\nconst Login = React.lazy(() => import(\"../Login\"));\nconst Menu = React.lazy(() => import(\"../Menu\"));\nconst CheckStock = React.lazy(() => import(\"../CheckStock\"));\n\nconst Main: React.FC = () => {\n\n  const Stack: any = createStackNavigator();\n  const dispatch = useDispatch();\n  const { authResult } = useSelector(selectAuth);\n\n  const validateToken = async () => {\n    try {\n\n      //? get token, status from AsyncStorage\n      const auth: any = JSON.parse(await AsyncStorage.getItem(\"auth\") || \"{}\");\n\n      if (auth.status) {\n\n        const accessTime = getTimeFromToken(auth.data.token);\n        const currentTime = getCurrentTimeStamp();\n\n        //? if token is expired\n        if (currentTime - accessTime > expireTime) {\n          Alert.alert(\"Alert\", \"Your token is expired, please login again\", [\n            {\n              text: \"OK\",\n              onPress: () => {\n                dispatch(setAuth({}));\n              },\n            },\n          ]);\n        }\n\n        //? if token is valid\n        dispatch(setAuth(auth));\n\n      } else {\n        dispatch(setAuth({}));\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    validateToken();\n  }, []);\n\n  return (\n    <>\n      <Stack.Navigator>\n        {authResult?.status ? (\n          <>\n            <Stack.Screen name=\"Menu\" component={Menu} />\n            <Stack.Screen name=\"CheckStock\" component={CheckStock} />\n          </>\n        ) : (\n          <Stack.Screen name=\"Login\" component={Login}  />\n        )}\n      </Stack.Navigator>\n    </>\n  );\n};\n\nexport default Main;\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;AAEA,SAASC,oBAAT,QAAqC,yBAArC;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AAEA,SAASC,OAAT,EAAkBC,UAAlB;AAEA,SAASC,mBAAT;AACA,SAASC,UAAT;AACA,SAASC,gBAAT;;;;AAEA,IAAMC,KAAK,GAAGX,KAAK,CAACY,IAAN,CAAW;EAAA,OAAM,kBAAN;AAAA,CAAX,CAAd;AACA,IAAMC,IAAI,GAAGb,KAAK,CAACY,IAAN,CAAW;EAAA,OAAM,iBAAN;AAAA,CAAX,CAAb;AACA,IAAME,UAAU,GAAGd,KAAK,CAACY,IAAN,CAAW;EAAA,OAAM,uBAAN;AAAA,CAAX,CAAnB;;AAEA,IAAMG,IAAc,GAAG,SAAjBA,IAAiB,GAAM;EAE3B,IAAMC,KAAU,GAAGZ,oBAAoB,EAAvC;EACA,IAAMa,QAAQ,GAAGf,WAAW,EAA5B;;EACA,mBAAuBC,WAAW,CAACI,UAAD,CAAlC;EAAA,IAAQW,UAAR,gBAAQA,UAAR;;EAEA,IAAMC,aAAa,GAAG;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,cAIAC,IAJA;YAAA;YAAA,iCAIiBf,YAAY,CAACgB,OAAb,CAAqB,MAArB,CAJjB;;UAAA;YAAA;;YAAA;cAAA;cAAA;YAAA;;YAAA,cAIiD,IAJjD;;UAAA;YAAA;YAIZC,IAJY,eAIKC,KAJL;;YAMlB,IAAID,IAAI,CAACE,MAAT,EAAiB;cAETC,UAFS,GAEIf,gBAAgB,CAACY,IAAI,CAACI,IAAL,CAAUC,KAAX,CAFpB;cAGTC,WAHS,GAGKpB,mBAAmB,EAHxB;;cAMf,IAAIoB,WAAW,GAAGH,UAAd,GAA2BhB,UAA/B,EAA2C;gBACzCoB,KAAK,CAACC,KAAN,CAAY,OAAZ,EAAqB,2CAArB,EAAkE,CAChE;kBACEC,IAAI,EAAE,IADR;kBAEEC,OAAO,EAAE,mBAAM;oBACbf,QAAQ,CAACX,OAAO,CAAC,EAAD,CAAR,CAAR;kBACD;gBAJH,CADgE,CAAlE;cAQD;;cAGDW,QAAQ,CAACX,OAAO,CAACgB,IAAD,CAAR,CAAR;YAED,CApBD,MAoBO;cACLL,QAAQ,CAACX,OAAO,CAAC,EAAD,CAAR,CAAR;YACD;;YA5BiB;YAAA;;UAAA;YAAA;YAAA;YA8BlB2B,OAAO,CAACC,GAAR;;UA9BkB;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAtB;;EAkCAjC,SAAS,CAAC,YAAM;IACdkB,aAAa;EACd,CAFQ,EAEN,EAFM,CAAT;EAIA,OACE;IAAA,UACE,KAAC,KAAD,CAAO,SAAP;MAAA,UACGD,UAAU,QAAV,IAAAA,UAAU,CAAEM,MAAZ,GACC;QAAA,WACE,KAAC,KAAD,CAAO,MAAP;UAAc,IAAI,EAAC,MAAnB;UAA0B,SAAS,EAAEX;QAArC,EADF,EAEE,KAAC,KAAD,CAAO,MAAP;UAAc,IAAI,EAAC,YAAnB;UAAgC,SAAS,EAAEC;QAA3C,EAFF;MAAA,EADD,GAMC,KAAC,KAAD,CAAO,MAAP;QAAc,IAAI,EAAC,OAAnB;QAA2B,SAAS,EAAEH;MAAtC;IAPJ;EADF,EADF;AAcD,CA1DD;;AA4DA,eAAeI,IAAf"},"metadata":{},"sourceType":"module"}