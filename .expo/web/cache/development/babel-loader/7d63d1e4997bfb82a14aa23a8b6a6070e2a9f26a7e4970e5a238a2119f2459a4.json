{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useQueryClient } from \"react-query\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Box, Input, Select, Icon, VStack, Button, useToast, FormControl, Text, HStack } from \"native-base\";\nimport { MaterialIcons } from \"@expo/vector-icons\";\nimport { DataTable } from \"react-native-paper\";\nimport { getDataFromQR } from \"../../utils/qr\";\nimport LoadingScreen from \"../../components/LoadingScreen\";\nimport AppScanner from \"../../components/AppScanner\";\nimport AppAlert from \"../../components/AppAlert\";\nimport AppAlertDialog from \"../../components/AppAlertDialog\";\nimport AlertDialogSemi from \"../../components/AlertDialogSemi\";\nimport { useJobRepack, useJobRepackBOM, useUpdateJobRepack, useExecJobRepackTransactions, useExecJobRepackItem } from \"../../hooks/useJobRepack\";\nimport { styles } from \"../styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar JobRepack = function JobRepack() {\n  var _orderData$data2, _orderData$data2$data, _bomData$data3, _bomData$data3$data;\n  var initOrder = {};\n  var initItem = {\n    QR_NO: \"\",\n    Tag_ID: \"\",\n    Item_ID: \"\",\n    Series: \"\"\n  };\n  var initBox = {\n    QR_NO_BOX: \"\"\n  };\n  var initErrors = {};\n  var toast = useToast();\n  var queryClient = useQueryClient();\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    camera = _useState2[0],\n    setCamera = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    camera2 = _useState4[0],\n    setCamera2 = _useState4[1];\n  var _useState5 = useState(initOrder),\n    _useState6 = _slicedToArray(_useState5, 2),\n    order = _useState6[0],\n    setOrder = _useState6[1];\n  var _useState7 = useState(initItem),\n    _useState8 = _slicedToArray(_useState7, 2),\n    item = _useState8[0],\n    setItem = _useState8[1];\n  var _useState9 = useState(initBox),\n    _useState10 = _slicedToArray(_useState9, 2),\n    box = _useState10[0],\n    setBox = _useState10[1];\n  var _useState11 = useState(initErrors),\n    _useState12 = _slicedToArray(_useState11, 2),\n    errors = _useState12[0],\n    setErrors = _useState12[1];\n  var _useState13 = useState(true),\n    _useState14 = _slicedToArray(_useState13, 2),\n    disabledButton = _useState14[0],\n    setDisabledButton = _useState14[1];\n  var _useState15 = useState(false),\n    _useState16 = _slicedToArray(_useState15, 2),\n    disabledItem = _useState16[0],\n    setDisabledItem = _useState16[1];\n  var _useState17 = useState(true),\n    _useState18 = _slicedToArray(_useState17, 2),\n    disabledBox = _useState18[0],\n    setDisabledBox = _useState18[1];\n  var _useState19 = useState(false),\n    _useState20 = _slicedToArray(_useState19, 2),\n    isOpenAlertDialog = _useState20[0],\n    setIsOpenAlertDialog = _useState20[1];\n  var _useState21 = useState(false),\n    _useState22 = _slicedToArray(_useState21, 2),\n    isOpenAlertDialogSemi = _useState22[0],\n    setIsOpenAlertDialogSemi = _useState22[1];\n  var refInput = useRef(null);\n  var refInputBox = useRef(null);\n  var refScanner = useRef(false);\n  var refScannerBox = useRef(false);\n  var _useJobRepack = useJobRepack(),\n    orderIsLoading = _useJobRepack.isLoading,\n    isFetching = _useJobRepack.isFetching,\n    isError = _useJobRepack.isError,\n    orderData = _useJobRepack.data,\n    orderRefetch = _useJobRepack.refetch,\n    status = _useJobRepack.status,\n    error = _useJobRepack.error;\n  var _useJobRepackBOM = useJobRepackBOM({\n      JOB_ID: (order == null ? void 0 : order.JOB_ID) || \"\"\n    }),\n    bomIsLoading = _useJobRepackBOM.isLoading,\n    bomData = _useJobRepackBOM.data,\n    bomRefetch = _useJobRepackBOM.refetch;\n  var _useExecJobRepackItem = useExecJobRepackItem(),\n    itemIsLoading = _useExecJobRepackItem.isLoading,\n    itemIsError = _useExecJobRepackItem.isError,\n    itemStatus = _useExecJobRepackItem.status,\n    itemError = _useExecJobRepackItem.error,\n    itemMutate = _useExecJobRepackItem.mutate,\n    itemData = _useExecJobRepackItem.data;\n  var _useExecJobRepackTran = useExecJobRepackTransactions(),\n    transIsLoading = _useExecJobRepackTran.isLoading,\n    transIsError = _useExecJobRepackTran.isError,\n    transStatus = _useExecJobRepackTran.status,\n    transError = _useExecJobRepackTran.error,\n    transMutate = _useExecJobRepackTran.mutate,\n    transData = _useExecJobRepackTran.data;\n  var _useUpdateJobRepack = useUpdateJobRepack(),\n    updateIsLoading = _useUpdateJobRepack.isLoading,\n    updateIsError = _useUpdateJobRepack.isError,\n    updateStatus = _useUpdateJobRepack.status,\n    updateError = _useUpdateJobRepack.error,\n    updateMutate = _useUpdateJobRepack.mutate,\n    updateData = _useUpdateJobRepack.data;\n  var handleChangeOrder = function handleChangeOrder(value) {\n    var _orderData$data, _jobOrder$filter$;\n    if (!value) {\n      return;\n    }\n    clearState(\"Error\");\n    var job = value.split(\"|\");\n    var jobOrder = _toConsumableArray(orderData == null ? void 0 : (_orderData$data = orderData.data) == null ? void 0 : _orderData$data.data);\n    var BOX_QTY = ((_jobOrder$filter$ = jobOrder.filter(function (value) {\n      return value.JOB_ID === parseInt(job[0]);\n    })[0]) == null ? void 0 : _jobOrder$filter$.BOX_QTY) || 0;\n    setOrder(_objectSpread(_objectSpread({}, order), {}, {\n      JOB: value,\n      JOB_ID: job[0],\n      JOB_QTY: parseInt(job[1]),\n      BOX_QTY: parseInt(BOX_QTY)\n    }));\n  };\n  var handleScanner = function handleScanner(value) {\n    setCamera(false);\n    if (!value) {\n      return;\n    }\n    clearState(\"Error\");\n    var qr = getDataFromQR(value);\n    if (qr != null && qr.ITEM_CODE) {\n      setItem(_objectSpread(_objectSpread({}, item), {}, {\n        Item_Code: (qr == null ? void 0 : qr.ITEM_CODE) || \"\"\n      }));\n    } else {\n      setItem(_objectSpread(_objectSpread({}, item), {}, {\n        QR_NO: (qr == null ? void 0 : qr.QR_NO) || \"\",\n        Tag_ID: (qr == null ? void 0 : qr.Tag_ID) || \"\",\n        Item_ID: (qr == null ? void 0 : qr.Item_ID) || \"\",\n        Series: (qr == null ? void 0 : qr.Series) || \"\"\n      }));\n    }\n    refScanner.current = true;\n  };\n  var handleScannerBox = function handleScannerBox(value) {\n    setCamera2(false);\n    if (!value) {\n      return;\n    }\n    clearState(\"Error\");\n    var qr = getDataFromQR(value);\n    setBox(_objectSpread(_objectSpread({}, box), {}, {\n      QR_NO_BOX: (qr == null ? void 0 : qr.QR_NO) || \"\"\n    }));\n    refScannerBox.current = true;\n  };\n  var handleAlertDialog = function handleAlertDialog() {\n    if (parseInt((order == null ? void 0 : order.JOB_QTY) || 0) !== parseInt((order == null ? void 0 : order.BOX_QTY) || 0) && parseInt((order == null ? void 0 : order.JOB_QTY) || 0) > 0 && parseInt((order == null ? void 0 : order.BOX_QTY) || 0) !== 0) {\n      setIsOpenAlertDialog(true);\n    } else {\n      handleSubmit();\n    }\n  };\n  var handleSubmit = function handleSubmit() {\n    updateMutate(order);\n  };\n  var handleScannerSubmit = function handleScannerSubmit() {\n    itemMutate(_objectSpread(_objectSpread({}, order), item));\n  };\n  var calculateItem = function calculateItem() {\n    var _bomData$data, _bomData$data$data, _bomData$data2, _bomData$data2$data;\n    var sumBOM = (bomData == null ? void 0 : (_bomData$data = bomData.data) == null ? void 0 : (_bomData$data$data = _bomData$data.data) == null ? void 0 : _bomData$data$data.reduce(function (previousValue, currentValue) {\n      return previousValue + parseInt(currentValue.BOM);\n    }, 0)) || 0;\n    var sumActual = (bomData == null ? void 0 : (_bomData$data2 = bomData.data) == null ? void 0 : (_bomData$data2$data = _bomData$data2.data) == null ? void 0 : _bomData$data2$data.reduce(function (previousValue, currentValue) {\n      return previousValue + parseInt(currentValue.Actual);\n    }, 0)) || 0;\n    if (parseInt(sumActual) === parseInt(sumBOM) && parseInt(sumActual) !== 0) {\n      setDisabledItem(true);\n      setDisabledBox(false);\n    } else {\n      setDisabledItem(false);\n      setDisabledBox(true);\n    }\n  };\n  var calculateBox = function calculateBox() {\n    if (parseInt((order == null ? void 0 : order.JOB_QTY) || 0) === parseInt((order == null ? void 0 : order.BOX_QTY) || 0) && parseInt((order == null ? void 0 : order.BOX_QTY) || 0) !== 0) {\n      setDisabledItem(true);\n      setDisabledBox(true);\n      setDisabledButton(false);\n    } else if (parseInt((order == null ? void 0 : order.JOB_QTY) || 0) > 0 && parseInt((order == null ? void 0 : order.BOX_QTY) || 0) !== 0) {\n      setDisabledButton(false);\n    }\n  };\n  var validateErrors = function validateErrors(QRType) {\n    refScanner.current = false;\n    refScannerBox.current = false;\n    if (!order.JOB_ID) {\n      setErrors(_objectSpread(_objectSpread({}, errors), {}, {\n        JOB_ID: \"Repack Order is required\"\n      }));\n      clearState(\"Item\");\n      return false;\n    }\n    if (bomData.data.data.filter(function (value) {\n      if (item != null && item.Item_Code) return value.SP === item.Item_Code && parseInt(value.Actual) === parseInt(value.BOM);else return parseInt(value.Item_ID) === parseInt(item.Item_ID) && parseInt(value.Actual) === parseInt(value.BOM);\n    }).length > 0) {\n      setErrors(_objectSpread(_objectSpread({}, errors), {}, {\n        QR_NO: \"This Item Actual Completed\"\n      }));\n      clearState(\"Item\");\n      return false;\n    }\n    if (QRType === \"Item\") {\n      if (item != null && item.Item_Code) {\n        if (!item.Item_Code) {\n          setErrors(_objectSpread(_objectSpread({}, errors), {}, {\n            QR_NO: \"Invalid QR format Miscellaneous\"\n          }));\n          clearState(\"Item\");\n          return false;\n        }\n      } else {\n        if (!item.QR_NO || !item.Tag_ID) {\n          setErrors(_objectSpread(_objectSpread({}, errors), {}, {\n            QR_NO: \"Invalid QR format\"\n          }));\n          clearState(\"Item\");\n          return false;\n        }\n      }\n    } else if (QRType === \"Box\") {\n      if (!box.QR_NO_BOX) {\n        setErrors(_objectSpread(_objectSpread({}, errors), {}, {\n          QR_NO_BOX: \"Invalid QR BOX format\"\n        }));\n        clearState(\"Box\");\n        return false;\n      }\n    }\n    return true;\n  };\n  var clearState = function clearState(type) {\n    if (type === \"All\") {\n      setOrder(initOrder);\n      setItem(initItem);\n      setBox(initBox);\n      setErrors(initErrors);\n      setDisabledButton(true);\n    } else if (type === \"Item\") {\n      setItem(initItem);\n    } else if (type === \"Box\") {\n      setBox(initBox);\n    } else if (type === \"Order\") {\n      setOrder(initOrder);\n    } else {\n      setErrors(initErrors);\n    }\n  };\n  useEffect(function () {\n    bomRefetch();\n  }, [order]);\n  useEffect(function () {\n    if (refScanner.current && validateErrors(\"Item\")) {\n      if (item.Series) {\n        setIsOpenAlertDialogSemi(true);\n      } else {\n        handleScannerSubmit();\n      }\n    }\n  }, [item]);\n  useEffect(function () {\n    if (refScannerBox.current && validateErrors(\"Box\")) {\n      transMutate(_objectSpread(_objectSpread({}, order), box));\n    }\n  }, [box]);\n  useEffect(function () {\n    handleChangeOrder(order.JOB);\n  }, [orderData]);\n  useEffect(function () {\n    calculateItem();\n    calculateBox();\n  }, [bomData]);\n  useEffect(function () {\n    if (itemStatus === \"success\") {\n      toast.show({\n        render: function render() {\n          var _itemData$data;\n          return _jsx(AppAlert, {\n            text: (itemData == null ? void 0 : (_itemData$data = itemData.data) == null ? void 0 : _itemData$data.message) || \"success\",\n            type: \"success\"\n          });\n        },\n        placement: \"top\",\n        duration: 2000\n      });\n    } else if (itemStatus === \"error\") {\n      toast.show({\n        render: function render() {\n          var _itemError$response, _itemError$response$d;\n          return _jsx(AppAlert, {\n            text: (itemError == null ? void 0 : (_itemError$response = itemError.response) == null ? void 0 : (_itemError$response$d = _itemError$response.data) == null ? void 0 : _itemError$response$d.message) || \"error\",\n            type: \"error\"\n          });\n        },\n        placement: \"top\",\n        duration: 3000\n      });\n    }\n    return function () {\n      refScanner.current = false;\n      clearState(\"Item\");\n    };\n  }, [itemStatus]);\n  useEffect(function () {\n    if (transStatus === \"success\") {\n      toast.show({\n        render: function render() {\n          var _transData$data;\n          return _jsx(AppAlert, {\n            text: (transData == null ? void 0 : (_transData$data = transData.data) == null ? void 0 : _transData$data.message) || \"success\",\n            type: \"success\"\n          });\n        },\n        placement: \"top\",\n        duration: 2000\n      });\n    } else if (transStatus === \"error\") {\n      toast.show({\n        render: function render() {\n          var _transError$response, _transError$response$;\n          return _jsx(AppAlert, {\n            text: (transError == null ? void 0 : (_transError$response = transError.response) == null ? void 0 : (_transError$response$ = _transError$response.data) == null ? void 0 : _transError$response$.message) || \"error\",\n            type: \"error\"\n          });\n        },\n        placement: \"top\",\n        duration: 3000\n      });\n    }\n    return function () {\n      refScannerBox.current = false;\n      clearState(\"Box\");\n    };\n  }, [transStatus]);\n  useEffect(function () {\n    if (updateStatus === \"success\") {\n      toast.show({\n        render: function render() {\n          var _updateData$data;\n          return _jsx(AppAlert, {\n            text: (updateData == null ? void 0 : (_updateData$data = updateData.data) == null ? void 0 : _updateData$data.message) || \"success\",\n            type: \"success\"\n          });\n        },\n        placement: \"top\",\n        duration: 2000\n      });\n      clearState(\"All\");\n    } else if (updateStatus === \"error\") {\n      toast.show({\n        render: function render() {\n          var _updateError$response, _updateError$response2;\n          return _jsx(AppAlert, {\n            text: (updateError == null ? void 0 : (_updateError$response = updateError.response) == null ? void 0 : (_updateError$response2 = _updateError$response.data) == null ? void 0 : _updateError$response2.message) || \"error\",\n            type: \"error\"\n          });\n        },\n        placement: \"top\",\n        duration: 3000\n      });\n    }\n    return function () {\n      refScanner.current = false;\n      refScannerBox.current = false;\n    };\n  }, [updateStatus]);\n  useEffect(function () {\n    var _refInput$current, _refInputBox$current;\n    refInput == null ? void 0 : (_refInput$current = refInput.current) == null ? void 0 : _refInput$current.focus();\n    refInputBox == null ? void 0 : (_refInputBox$current = refInputBox.current) == null ? void 0 : _refInputBox$current.focus();\n  });\n  useEffect(function () {\n    return function () {\n      clearState(\"All\");\n      queryClient.clear();\n    };\n  }, []);\n  return _jsx(_Fragment, {\n    children: !camera && !camera2 ? _jsx(TouchableWithoutFeedback, {\n      onPress: Keyboard.dismiss,\n      accessible: false,\n      children: _jsxs(Box, {\n        flex: 1,\n        children: [_jsx(LoadingScreen, {\n          show: itemIsLoading || updateIsLoading || transIsLoading\n        }), _jsxs(VStack, {\n          space: 5,\n          p: 5,\n          children: [_jsxs(FormControl, {\n            isRequired: true,\n            isInvalid: \"JOB_ID\" in errors,\n            children: [_jsx(Select, {\n              h: 50,\n              size: 20,\n              width: \"100%\",\n              accessibilityLabel: \"Choose Service\",\n              placeholder: \"REPACK ORDER NO.\",\n              selectedValue: order.JOB || \"\",\n              onValueChange: function onValueChange(value) {\n                return handleChangeOrder(value);\n              },\n              children: orderData == null ? void 0 : (_orderData$data2 = orderData.data) == null ? void 0 : (_orderData$data2$data = _orderData$data2.data) == null ? void 0 : _orderData$data2$data.map(function (value) {\n                return _jsx(Select.Item, {\n                  label: value.JOB_No,\n                  value: value.JOB_ID + \"|\" + value.JOB_QTY\n                }, value.JOB_ID);\n              })\n            }), \"JOB_ID\" in errors && _jsx(FormControl.ErrorMessage, {\n              children: errors.JOB_ID\n            })]\n          }), _jsxs(FormControl, {\n            isRequired: true,\n            isInvalid: \"QR_NO\" in errors,\n            children: [_jsx(Input, {\n              h: 50,\n              size: 20,\n              ref: refInput,\n              showSoftInputOnFocus: false,\n              variant: \"underlined\",\n              p: 2,\n              placeholder: \"SCAN QR PART\",\n              isDisabled: disabledItem,\n              InputRightElement: _jsx(Icon, {\n                size: 35,\n                color: \"primary.600\",\n                as: _jsx(MaterialIcons, {\n                  name: \"qr-code-scanner\"\n                }),\n                onPress: function onPress() {\n                  return setCamera(true);\n                },\n                disabled: disabledItem\n              }),\n              autoFocus: true,\n              value: \"\",\n              onChangeText: function onChangeText(value) {\n                return handleScanner(value);\n              }\n            }), \"QR_NO\" in errors && _jsx(FormControl.ErrorMessage, {\n              children: errors.QR_NO\n            })]\n          }), _jsx(ScrollView, {\n            keyboardShouldPersistTaps: \"handled\",\n            style: {\n              height: \"45%\"\n            },\n            refreshControl: _jsx(RefreshControl, {\n              refreshing: bomIsLoading,\n              onRefresh: function onRefresh() {\n                return orderRefetch();\n              }\n            }),\n            children: _jsx(TouchableOpacity, {\n              activeOpacity: 1,\n              children: _jsxs(DataTable, {\n                children: [_jsxs(DataTable.Header, {\n                  children: [_jsx(DataTable.Title, {\n                    style: styles.table_title_10,\n                    children: _jsx(Text, {\n                      bold: true,\n                      children: \"NO.\"\n                    })\n                  }), _jsx(DataTable.Title, {\n                    style: styles.table_title_54,\n                    children: _jsx(Text, {\n                      bold: true,\n                      children: \"PART\"\n                    })\n                  }), _jsx(DataTable.Title, {\n                    numeric: true,\n                    style: styles.table_title_18,\n                    children: _jsx(Text, {\n                      bold: true,\n                      children: \"ACT\"\n                    })\n                  }), _jsx(DataTable.Title, {\n                    numeric: true,\n                    style: styles.table_title_18,\n                    children: _jsx(Text, {\n                      bold: true,\n                      children: \"BOM\"\n                    })\n                  })]\n                }), (bomData == null ? void 0 : (_bomData$data3 = bomData.data) == null ? void 0 : (_bomData$data3$data = _bomData$data3.data) == null ? void 0 : _bomData$data3$data.map(function (value, key) {\n                  return _jsxs(DataTable.Row, {\n                    children: [_jsx(DataTable.Title, {\n                      style: styles.table_title_10,\n                      children: value.No\n                    }), _jsx(DataTable.Cell, {\n                      style: styles.table_title_54,\n                      children: _jsx(Text, {\n                        color: value.Product_ID === 3 ? \"indigo.500\" : value.Product_ID === 4 ? \"blue.500\" : \"black\",\n                        children: value.SP\n                      })\n                    }), _jsx(DataTable.Cell, {\n                      numeric: true,\n                      style: styles.table_title_18,\n                      children: _jsx(Text, {\n                        bold: true,\n                        color: \"red.600\",\n                        children: value.Actual\n                      })\n                    }), _jsx(DataTable.Cell, {\n                      numeric: true,\n                      style: styles.table_title_18,\n                      children: value.BOM\n                    })]\n                  }, key);\n                })) || _jsx(DataTable.Row, {\n                  children: _jsx(DataTable.Title, {\n                    children: \"No Data\"\n                  })\n                })]\n              })\n            })\n          }), _jsxs(HStack, {\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            children: [_jsxs(FormControl, {\n              w: \"50%\",\n              isRequired: true,\n              isInvalid: \"QR_NO_BOX\" in errors,\n              isDisabled: disabledBox,\n              children: [_jsx(Input, {\n                h: 50,\n                size: 20,\n                ref: refInputBox,\n                showSoftInputOnFocus: false,\n                variant: \"underlined\",\n                p: 2,\n                placeholder: \"QR BOX\",\n                InputRightElement: _jsx(Icon, {\n                  size: 35,\n                  color: \"primary.600\",\n                  as: _jsx(MaterialIcons, {\n                    name: \"qr-code-scanner\"\n                  }),\n                  onPress: function onPress() {\n                    return setCamera2(true);\n                  },\n                  disabled: disabledBox\n                }),\n                value: (box == null ? void 0 : box.QR_NO_BOX) || \"\",\n                onChangeText: function onChangeText(value) {\n                  return handleScannerBox(value);\n                }\n              }), \"QR_NO_BOX\" in errors && _jsx(FormControl.ErrorMessage, {\n                children: errors.QR_NO_BOX\n              })]\n            }), _jsxs(Text, {\n              fontSize: 25,\n              children: [_jsx(Text, {\n                bold: true,\n                color: \"green.600\",\n                children: \"\" + ((order == null ? void 0 : order.BOX_QTY) || 0)\n              }), \" / \" + ((order == null ? void 0 : order.JOB_QTY) || 0) + \" BOX\"]\n            })]\n          }), _jsx(Button, {\n            backgroundColor: \"green.600\",\n            leftIcon: _jsx(Icon, {\n              as: _jsx(MaterialIcons, {\n                name: \"check\"\n              }),\n              size: \"sm\"\n            }),\n            isDisabled: disabledButton,\n            onPress: handleAlertDialog,\n            children: \"SAVE\"\n          })]\n        }), _jsx(AppAlertDialog, {\n          isOpenAlertDialog: isOpenAlertDialog,\n          setIsOpenAlertDialog: setIsOpenAlertDialog,\n          handleSubmit: handleSubmit\n        }), _jsx(AlertDialogSemi, {\n          itemSemi: item,\n          isOpenAlertDialogSemi: isOpenAlertDialogSemi,\n          setIsOpenAlertDialogSemi: setIsOpenAlertDialogSemi,\n          handleScannerSubmit: handleScannerSubmit\n        })]\n      })\n    }) : !camera2 ? _jsx(AppScanner, {\n      handleScanner: handleScanner\n    }) : _jsx(AppScanner, {\n      handleScanner: handleScannerBox\n    })\n  });\n};\nexport default JobRepack;","map":{"version":3,"names":["React","useState","useEffect","useRef","useQueryClient","TouchableWithoutFeedback","Keyboard","RefreshControl","ScrollView","TouchableOpacity","Box","Input","Select","Icon","VStack","Button","useToast","FormControl","Text","HStack","MaterialIcons","DataTable","getDataFromQR","LoadingScreen","AppScanner","AppAlert","AppAlertDialog","AlertDialogSemi","useJobRepack","useJobRepackBOM","useUpdateJobRepack","useExecJobRepackTransactions","useExecJobRepackItem","styles","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","JobRepack","_orderData$data2","_orderData$data2$data","_bomData$data3","_bomData$data3$data","initOrder","initItem","QR_NO","Tag_ID","Item_ID","Series","initBox","QR_NO_BOX","initErrors","toast","queryClient","_useState","_useState2","_slicedToArray","camera","setCamera","_useState3","_useState4","camera2","setCamera2","_useState5","_useState6","order","setOrder","_useState7","_useState8","item","setItem","_useState9","_useState10","box","setBox","_useState11","_useState12","errors","setErrors","_useState13","_useState14","disabledButton","setDisabledButton","_useState15","_useState16","disabledItem","setDisabledItem","_useState17","_useState18","disabledBox","setDisabledBox","_useState19","_useState20","isOpenAlertDialog","setIsOpenAlertDialog","_useState21","_useState22","isOpenAlertDialogSemi","setIsOpenAlertDialogSemi","refInput","refInputBox","refScanner","refScannerBox","_useJobRepack","orderIsLoading","isLoading","isFetching","isError","orderData","data","orderRefetch","refetch","status","error","_useJobRepackBOM","JOB_ID","bomIsLoading","bomData","bomRefetch","_useExecJobRepackItem","itemIsLoading","itemIsError","itemStatus","itemError","itemMutate","mutate","itemData","_useExecJobRepackTran","transIsLoading","transIsError","transStatus","transError","transMutate","transData","_useUpdateJobRepack","updateIsLoading","updateIsError","updateStatus","updateError","updateMutate","updateData","handleChangeOrder","value","_orderData$data","_jobOrder$filter$","clearState","job","split","jobOrder","_toConsumableArray","BOX_QTY","filter","parseInt","_objectSpread","JOB","JOB_QTY","handleScanner","qr","ITEM_CODE","Item_Code","current","handleScannerBox","handleAlertDialog","handleSubmit","handleScannerSubmit","calculateItem","_bomData$data","_bomData$data$data","_bomData$data2","_bomData$data2$data","sumBOM","reduce","previousValue","currentValue","BOM","sumActual","Actual","calculateBox","validateErrors","QRType","SP","length","type","show","render","_itemData$data","text","message","placement","duration","_itemError$response","_itemError$response$d","response","_transData$data","_transError$response","_transError$response$","_updateData$data","_updateError$response","_updateError$response2","_refInput$current","_refInputBox$current","focus","clear","children","onPress","dismiss","accessible","flex","space","p","isRequired","isInvalid","h","size","width","accessibilityLabel","placeholder","selectedValue","onValueChange","map","Item","label","JOB_No","ErrorMessage","ref","showSoftInputOnFocus","variant","isDisabled","InputRightElement","color","as","name","disabled","autoFocus","onChangeText","keyboardShouldPersistTaps","style","height","refreshControl","refreshing","onRefresh","activeOpacity","Header","Title","table_title_10","bold","table_title_54","numeric","table_title_18","key","Row","No","Cell","Product_ID","alignItems","justifyContent","w","fontSize","backgroundColor","leftIcon","itemSemi"],"sources":["D:/_Dev/expo/pk-mobile/src/views/JobRepack/JobRepack.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useQueryClient } from \"react-query\";\r\nimport {\r\n  TouchableWithoutFeedback,\r\n  Keyboard,\r\n  RefreshControl,\r\n  ScrollView,\r\n  TouchableOpacity,\r\n} from \"react-native\";\r\nimport {\r\n  Box,\r\n  Input,\r\n  Select,\r\n  Icon,\r\n  VStack,\r\n  Button,\r\n  useToast,\r\n  FormControl,\r\n  Text,\r\n  HStack,\r\n  AlertDialog,\r\n} from \"native-base\";\r\nimport { MaterialIcons } from \"@expo/vector-icons\";\r\nimport { DataTable } from \"react-native-paper\";\r\n\r\nimport { getDataFromQR } from \"../../utils/qr\";\r\nimport LoadingScreen from \"../../components/LoadingScreen\";\r\nimport AppScanner from \"../../components/AppScanner\";\r\nimport AppAlert from \"../../components/AppAlert\";\r\nimport AppAlertDialog from \"../../components/AppAlertDialog\";\r\nimport AlertDialogSemi from \"../../components/AlertDialogSemi\";\r\n\r\nimport {\r\n  useJobRepack,\r\n  useJobRepackBOM,\r\n  useUpdateJobRepack,\r\n  useExecJobRepackTransactions,\r\n  useExecJobRepackItem,\r\n} from \"../../hooks/useJobRepack\";\r\n\r\nimport { styles } from \"../styles\";\r\n\r\nconst JobRepack: React.FC = () => {\r\n  const initOrder = {};\r\n  const initItem = { QR_NO: \"\", Tag_ID: \"\", Item_ID: \"\", Series: \"\" };\r\n  const initBox = { QR_NO_BOX: \"\" };\r\n  const initErrors = {};\r\n\r\n  const toast = useToast();\r\n  const queryClient = useQueryClient();\r\n\r\n  const [camera, setCamera] = useState<boolean>(false);\r\n  const [camera2, setCamera2] = useState<boolean>(false);\r\n\r\n  const [order, setOrder] = useState<any>(initOrder);\r\n  const [item, setItem] = useState<any>(initItem);\r\n  const [box, setBox] = useState<any>(initBox);\r\n  const [errors, setErrors] = useState<any>(initErrors);\r\n\r\n  const [disabledButton, setDisabledButton] = useState<boolean>(true);\r\n  const [disabledItem, setDisabledItem] = useState<boolean>(false);\r\n  const [disabledBox, setDisabledBox] = useState<boolean>(true);\r\n\r\n  const [isOpenAlertDialog, setIsOpenAlertDialog] = useState(false);\r\n  const [isOpenAlertDialogSemi, setIsOpenAlertDialogSemi] = useState(false);\r\n\r\n  const refInput = useRef<any>(null);\r\n  const refInputBox = useRef<any>(null);\r\n  const refScanner = useRef<boolean>(false);\r\n  const refScannerBox = useRef<boolean>(false);\r\n\r\n  const {\r\n    isLoading: orderIsLoading,\r\n    isFetching,\r\n    isError,\r\n    data: orderData,\r\n    refetch: orderRefetch,\r\n    status,\r\n    error,\r\n  } = useJobRepack();\r\n\r\n  const {\r\n    isLoading: bomIsLoading,\r\n    data: bomData,\r\n    refetch: bomRefetch,\r\n  } = useJobRepackBOM({\r\n    JOB_ID: order?.JOB_ID || \"\",\r\n  });\r\n\r\n  const {\r\n    isLoading: itemIsLoading,\r\n    isError: itemIsError,\r\n    status: itemStatus,\r\n    error: itemError,\r\n    mutate: itemMutate,\r\n    data: itemData,\r\n  } = useExecJobRepackItem();\r\n\r\n  const {\r\n    isLoading: transIsLoading,\r\n    isError: transIsError,\r\n    status: transStatus,\r\n    error: transError,\r\n    mutate: transMutate,\r\n    data: transData,\r\n  } = useExecJobRepackTransactions();\r\n\r\n  const {\r\n    isLoading: updateIsLoading,\r\n    isError: updateIsError,\r\n    status: updateStatus,\r\n    error: updateError,\r\n    mutate: updateMutate,\r\n    data: updateData,\r\n  } = useUpdateJobRepack();\r\n\r\n  const handleChangeOrder = (value: string) => {\r\n    if (!value) {\r\n      return;\r\n    }\r\n\r\n    clearState(\"Error\");\r\n\r\n    let job = value.split(\"|\");\r\n\r\n    let jobOrder = [...orderData?.data?.data];\r\n\r\n    let BOX_QTY =\r\n      jobOrder.filter((value: any) => {\r\n        return value.JOB_ID === parseInt(job[0]);\r\n      })[0]?.BOX_QTY || 0;\r\n\r\n    setOrder({\r\n      ...order,\r\n      JOB: value,\r\n      JOB_ID: job[0],\r\n      JOB_QTY: parseInt(job[1]),\r\n      BOX_QTY: parseInt(BOX_QTY),\r\n    });\r\n  };\r\n\r\n  const handleScanner = (value: any) => {\r\n    setCamera(false);\r\n\r\n    if (!value) {\r\n      return;\r\n    }\r\n\r\n    clearState(\"Error\");\r\n\r\n    const qr = getDataFromQR(value);\r\n\r\n    if (qr?.ITEM_CODE) {\r\n      setItem({\r\n        ...item,\r\n        Item_Code: qr?.ITEM_CODE || \"\",\r\n      });\r\n    } else {\r\n      setItem({\r\n        ...item,\r\n        QR_NO: qr?.QR_NO || \"\",\r\n        Tag_ID: qr?.Tag_ID || \"\",\r\n        Item_ID: qr?.Item_ID || \"\",\r\n        Series: qr?.Series || \"\",\r\n      });\r\n    }\r\n\r\n    refScanner.current = true;\r\n  };\r\n\r\n  const handleScannerBox = (value: any) => {\r\n    setCamera2(false);\r\n\r\n    if (!value) {\r\n      return;\r\n    }\r\n\r\n    clearState(\"Error\");\r\n\r\n    const qr = getDataFromQR(value);\r\n\r\n    setBox({ ...box, QR_NO_BOX: qr?.QR_NO || \"\" });\r\n\r\n    refScannerBox.current = true;\r\n  };\r\n\r\n  const handleAlertDialog = () => {\r\n    if (\r\n      parseInt(order?.JOB_QTY || 0) !== parseInt(order?.BOX_QTY || 0) &&\r\n      parseInt(order?.JOB_QTY || 0) > 0 &&\r\n      parseInt(order?.BOX_QTY || 0) !== 0\r\n    ) {\r\n      setIsOpenAlertDialog(true);\r\n    } else {\r\n      handleSubmit();\r\n    }\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    updateMutate(order);\r\n  };\r\n\r\n  const handleScannerSubmit = () => {\r\n    itemMutate({ ...order, ...item });\r\n  };\r\n\r\n  const calculateItem = () => {\r\n    const sumBOM =\r\n      bomData?.data?.data?.reduce((previousValue: any, currentValue: any) => {\r\n        return previousValue + parseInt(currentValue.BOM);\r\n      }, 0) || 0;\r\n\r\n    const sumActual =\r\n      bomData?.data?.data?.reduce((previousValue: any, currentValue: any) => {\r\n        return previousValue + parseInt(currentValue.Actual);\r\n      }, 0) || 0;\r\n\r\n    if (parseInt(sumActual) === parseInt(sumBOM) && parseInt(sumActual) !== 0) {\r\n      setDisabledItem(true);\r\n      setDisabledBox(false);\r\n    } else {\r\n      setDisabledItem(false);\r\n      setDisabledBox(true);\r\n    }\r\n  };\r\n\r\n  const calculateBox = () => {\r\n    if (\r\n      parseInt(order?.JOB_QTY || 0) === parseInt(order?.BOX_QTY || 0) &&\r\n      parseInt(order?.BOX_QTY || 0) !== 0\r\n    ) {\r\n      setDisabledItem(true);\r\n      setDisabledBox(true);\r\n      setDisabledButton(false);\r\n    } else if (\r\n      parseInt(order?.JOB_QTY || 0) > 0 &&\r\n      parseInt(order?.BOX_QTY || 0) !== 0\r\n    ) {\r\n      setDisabledButton(false);\r\n    }\r\n  };\r\n\r\n  const validateErrors = (QRType: string) => {\r\n    refScanner.current = false;\r\n    refScannerBox.current = false;\r\n\r\n    if (!order.JOB_ID) {\r\n      setErrors({ ...errors, JOB_ID: \"Repack Order is required\" });\r\n      clearState(\"Item\");\r\n      return false;\r\n    }\r\n\r\n    if (\r\n      bomData.data.data.filter((value: any) => {\r\n        if (item?.Item_Code)\r\n          return (\r\n            value.SP === item.Item_Code &&\r\n            parseInt(value.Actual) === parseInt(value.BOM)\r\n          );\r\n        else\r\n          return (\r\n            parseInt(value.Item_ID) === parseInt(item.Item_ID) &&\r\n            parseInt(value.Actual) === parseInt(value.BOM)\r\n          );\r\n      }).length > 0\r\n    ) {\r\n      setErrors({ ...errors, QR_NO: \"This Item Actual Completed\" });\r\n      clearState(\"Item\");\r\n      return false;\r\n    }\r\n\r\n    if (QRType === \"Item\") {\r\n      if (item?.Item_Code) {\r\n        if (!item.Item_Code) {\r\n          setErrors({ ...errors, QR_NO: \"Invalid QR format Miscellaneous\" });\r\n          clearState(\"Item\");\r\n          return false;\r\n        }\r\n      } else {\r\n        if (!item.QR_NO || !item.Tag_ID) {\r\n          setErrors({ ...errors, QR_NO: \"Invalid QR format\" });\r\n          clearState(\"Item\");\r\n          return false;\r\n        }\r\n      }\r\n    } else if (QRType === \"Box\") {\r\n      if (!box.QR_NO_BOX) {\r\n        setErrors({ ...errors, QR_NO_BOX: \"Invalid QR BOX format\" });\r\n        clearState(\"Box\");\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  const clearState = (type: string) => {\r\n    if (type === \"All\") {\r\n      setOrder(initOrder);\r\n      setItem(initItem);\r\n      setBox(initBox);\r\n      setErrors(initErrors);\r\n      setDisabledButton(true);\r\n    } else if (type === \"Item\") {\r\n      setItem(initItem);\r\n    } else if (type === \"Box\") {\r\n      setBox(initBox);\r\n    } else if (type === \"Order\") {\r\n      setOrder(initOrder);\r\n    } else {\r\n      setErrors(initErrors);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    bomRefetch();\r\n  }, [order]);\r\n\r\n  useEffect(() => {\r\n    if (refScanner.current && validateErrors(\"Item\")) {\r\n      if (item.Series) {\r\n        setIsOpenAlertDialogSemi(true);\r\n      } else {\r\n        handleScannerSubmit();\r\n      }\r\n    }\r\n  }, [item]);\r\n\r\n  useEffect(() => {\r\n    if (refScannerBox.current && validateErrors(\"Box\")) {\r\n      transMutate({ ...order, ...box });\r\n    }\r\n  }, [box]);\r\n\r\n  useEffect(() => {\r\n    handleChangeOrder(order.JOB);\r\n  }, [orderData]);\r\n\r\n  useEffect(() => {\r\n    calculateItem();\r\n    calculateBox();\r\n  }, [bomData]);\r\n\r\n  useEffect(() => {\r\n    if (itemStatus === \"success\") {\r\n      toast.show({\r\n        render: () => (\r\n          <AppAlert\r\n            text={itemData?.data?.message || \"success\"}\r\n            type=\"success\"\r\n          />\r\n        ),\r\n        placement: \"top\",\r\n        duration: 2000,\r\n      });\r\n    } else if (itemStatus === \"error\") {\r\n      toast.show({\r\n        render: () => (\r\n          <AppAlert\r\n            text={itemError?.response?.data?.message || \"error\"}\r\n            type=\"error\"\r\n          />\r\n        ),\r\n        placement: \"top\",\r\n        duration: 3000,\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      refScanner.current = false;\r\n      clearState(\"Item\");\r\n    };\r\n  }, [itemStatus]);\r\n\r\n  useEffect(() => {\r\n    if (transStatus === \"success\") {\r\n      toast.show({\r\n        render: () => (\r\n          <AppAlert\r\n            text={transData?.data?.message || \"success\"}\r\n            type=\"success\"\r\n          />\r\n        ),\r\n        placement: \"top\",\r\n        duration: 2000,\r\n      });\r\n    } else if (transStatus === \"error\") {\r\n      toast.show({\r\n        render: () => (\r\n          <AppAlert\r\n            text={transError?.response?.data?.message || \"error\"}\r\n            type=\"error\"\r\n          />\r\n        ),\r\n        placement: \"top\",\r\n        duration: 3000,\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      refScannerBox.current = false;\r\n      clearState(\"Box\");\r\n    };\r\n  }, [transStatus]);\r\n\r\n  useEffect(() => {\r\n    if (updateStatus === \"success\") {\r\n      toast.show({\r\n        render: () => (\r\n          <AppAlert\r\n            text={updateData?.data?.message || \"success\"}\r\n            type=\"success\"\r\n          />\r\n        ),\r\n        placement: \"top\",\r\n        duration: 2000,\r\n      });\r\n      clearState(\"All\");\r\n    } else if (updateStatus === \"error\") {\r\n      toast.show({\r\n        render: () => (\r\n          <AppAlert\r\n            text={updateError?.response?.data?.message || \"error\"}\r\n            type=\"error\"\r\n          />\r\n        ),\r\n        placement: \"top\",\r\n        duration: 3000,\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      refScanner.current = false;\r\n      refScannerBox.current = false;\r\n    };\r\n  }, [updateStatus]);\r\n\r\n  useEffect(() => {\r\n    refInput?.current?.focus();\r\n    refInputBox?.current?.focus();\r\n  });\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      clearState(\"All\");\r\n      queryClient.clear();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {!camera && !camera2 ? (\r\n        <TouchableWithoutFeedback onPress={Keyboard.dismiss} accessible={false}>\r\n          <Box flex={1}>\r\n            <LoadingScreen show={itemIsLoading ||updateIsLoading || transIsLoading} />\r\n            <VStack space={5} p={5}>\r\n              <FormControl isRequired isInvalid={\"JOB_ID\" in errors}>\r\n                <Select\r\n                  h={50}\r\n                  size={20}\r\n                  width={\"100%\"}\r\n                  accessibilityLabel=\"Choose Service\"\r\n                  placeholder=\"REPACK ORDER NO.\"\r\n                  selectedValue={order.JOB || \"\"}\r\n                  onValueChange={(value) => handleChangeOrder(value)}\r\n                >\r\n                  {orderData?.data?.data?.map((value: any) => {\r\n                    return (\r\n                      <Select.Item\r\n                        key={value.JOB_ID}\r\n                        label={value.JOB_No}\r\n                        value={`${value.JOB_ID}|${value.JOB_QTY}`}\r\n                      />\r\n                    );\r\n                  })}\r\n                </Select>\r\n                {\"JOB_ID\" in errors && (\r\n                  <FormControl.ErrorMessage>\r\n                    {errors.JOB_ID}\r\n                  </FormControl.ErrorMessage>\r\n                )}\r\n              </FormControl>\r\n              <FormControl isRequired isInvalid={\"QR_NO\" in errors}>\r\n                <Input\r\n                  h={50}\r\n                  size={20}\r\n                  ref={refInput}\r\n                  showSoftInputOnFocus={false}\r\n                  variant=\"underlined\"\r\n                  p={2}\r\n                  placeholder=\"SCAN QR PART\"\r\n                  isDisabled={disabledItem}\r\n                  InputRightElement={\r\n                    <Icon\r\n                      size={35}\r\n                      color={\"primary.600\"}\r\n                      as={<MaterialIcons name=\"qr-code-scanner\" />}\r\n                      onPress={() => setCamera(true)}\r\n                      disabled={disabledItem}\r\n                    />\r\n                  }\r\n                  autoFocus\r\n                  value={/* item?.QR_NO || item?.Item_Code ||  */\"\"}\r\n                  onChangeText={(value) => handleScanner(value)}\r\n                />\r\n                {\"QR_NO\" in errors && (\r\n                  <FormControl.ErrorMessage>\r\n                    {errors.QR_NO}\r\n                  </FormControl.ErrorMessage>\r\n                )}\r\n              </FormControl>\r\n              <ScrollView\r\n                keyboardShouldPersistTaps=\"handled\"\r\n                style={{ height: \"45%\" }}\r\n                refreshControl={\r\n                  <RefreshControl\r\n                    refreshing={bomIsLoading}\r\n                    onRefresh={() => orderRefetch()}\r\n                  />\r\n                }\r\n              >\r\n                <TouchableOpacity activeOpacity={1}>\r\n                  <DataTable>\r\n                    <DataTable.Header>\r\n                      <DataTable.Title style={styles.table_title_10}>\r\n                        <Text bold>NO.</Text>\r\n                      </DataTable.Title>\r\n                      <DataTable.Title style={styles.table_title_54}>\r\n                        <Text bold>PART</Text>\r\n                      </DataTable.Title>\r\n                      <DataTable.Title numeric style={styles.table_title_18}>\r\n                        <Text bold>ACT</Text>\r\n                      </DataTable.Title>\r\n                      <DataTable.Title numeric style={styles.table_title_18}>\r\n                        <Text bold>BOM</Text>\r\n                      </DataTable.Title>\r\n                    </DataTable.Header>\r\n                    {bomData?.data?.data?.map((value: any, key: number) => {\r\n                      return (\r\n                        <DataTable.Row key={key}>\r\n                          <DataTable.Title style={styles.table_title_10}>\r\n                            {value.No}\r\n                          </DataTable.Title>\r\n                          <DataTable.Cell style={styles.table_title_54}>\r\n                            <Text\r\n                              color={\r\n                                value.Product_ID === 3\r\n                                  ? \"indigo.500\"\r\n                                  : value.Product_ID === 4\r\n                                  ? \"blue.500\"\r\n                                  : \"black\"\r\n                              }\r\n                            >\r\n                              {value.SP}\r\n                            </Text>\r\n                          </DataTable.Cell>\r\n                          <DataTable.Cell numeric style={styles.table_title_18}>\r\n                            <Text bold color={\"red.600\"}>\r\n                              {value.Actual}\r\n                            </Text>\r\n                          </DataTable.Cell>\r\n                          <DataTable.Cell numeric style={styles.table_title_18}>\r\n                            {value.BOM}\r\n                          </DataTable.Cell>\r\n                        </DataTable.Row>\r\n                      );\r\n                    }) || (\r\n                      <DataTable.Row>\r\n                        <DataTable.Title>No Data</DataTable.Title>\r\n                      </DataTable.Row>\r\n                    )}\r\n                  </DataTable>\r\n                </TouchableOpacity>\r\n              </ScrollView>\r\n              <HStack alignItems={\"center\"} justifyContent={\"space-between\"}>\r\n                <FormControl\r\n                  w=\"50%\"\r\n                  isRequired\r\n                  isInvalid={\"QR_NO_BOX\" in errors}\r\n                  isDisabled={disabledBox}\r\n                >\r\n                  <Input\r\n                    h={50}\r\n                    size={20}\r\n                    ref={refInputBox}\r\n                    showSoftInputOnFocus={false}\r\n                    variant=\"underlined\"\r\n                    p={2}\r\n                    placeholder=\"QR BOX\"\r\n                    InputRightElement={\r\n                      <Icon\r\n                        size={35}\r\n                        color={\"primary.600\"}\r\n                        as={<MaterialIcons name=\"qr-code-scanner\" />}\r\n                        onPress={() => setCamera2(true)}\r\n                        disabled={disabledBox}\r\n                      />\r\n                    }\r\n                    value={box?.QR_NO_BOX || \"\"}\r\n                    onChangeText={(value) => handleScannerBox(value)}\r\n                  />\r\n                  {\"QR_NO_BOX\" in errors && (\r\n                    <FormControl.ErrorMessage>\r\n                      {errors.QR_NO_BOX}\r\n                    </FormControl.ErrorMessage>\r\n                  )}\r\n                </FormControl>\r\n\r\n                <Text fontSize={25}>\r\n                  <Text bold color={\"green.600\"}>{`${\r\n                    order?.BOX_QTY || 0\r\n                  }`}</Text>\r\n                  {` / ${order?.JOB_QTY || 0} BOX`}\r\n                </Text>\r\n              </HStack>\r\n              <Button\r\n                backgroundColor=\"green.600\"\r\n                leftIcon={\r\n                  <Icon as={<MaterialIcons name=\"check\" />} size=\"sm\" />\r\n                }\r\n                isDisabled={disabledButton}\r\n                onPress={handleAlertDialog}\r\n              >\r\n                SAVE\r\n              </Button>\r\n            </VStack>\r\n            <AppAlertDialog\r\n              isOpenAlertDialog={isOpenAlertDialog}\r\n              setIsOpenAlertDialog={setIsOpenAlertDialog}\r\n              handleSubmit={handleSubmit}\r\n            />\r\n            <AlertDialogSemi\r\n              itemSemi={item}\r\n              isOpenAlertDialogSemi={isOpenAlertDialogSemi}\r\n              setIsOpenAlertDialogSemi={setIsOpenAlertDialogSemi}\r\n              handleScannerSubmit={handleScannerSubmit}\r\n            />\r\n          </Box>\r\n        </TouchableWithoutFeedback>\r\n      ) : !camera2 ? (\r\n        <AppScanner handleScanner={handleScanner} />\r\n      ) : (\r\n        <AppScanner handleScanner={handleScannerBox} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default JobRepack;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}